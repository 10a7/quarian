; quarian default settings.conf

[quarian]
    ; quarian user agent. used when communicating with outside APIs.
    user_agent = Quarian/0.1 (//github.com/10a7/quarian)
    ; amount of polling to do. blocks hit the chain every 15 seconds.
    ; this gives the chance for two blocks to hit before re-poll
    check_every_seconds = 30
    ; default loglevel. 'debug' is verbose. 'info' is nice. 'warn' if you
    ; have alerting on the quarian log.
    loglevel = info
    ; restart command type. 'shell' executes a command in a shell on
    ; the same box as quarian. 'http' makes a request to another server.
    restart_command_type = shell
    ; restart command. if restart_command_type is 'shell' this will be executed
    ; as a shell string. if restart_command_type is 'http' this will be
    ; executed as an http URI. If you need to specify a node URI, add $NODE_URI
    ; and it will be added (and URL escaped) to the command.
    restart_command = supervisorctl restart geth
    ; ignore nodes with eth.blockNumber = 0; i.e. nodes in --fast first run mode
    ignore_firstrun_node = yes
    ; geth reference node. this is used by get_highest_from to retrieve
    ; from a reliable, canonical source the tip of the chain.
    reference_node = http://localhost:8545/
    ; your etherscan api key, if you want to ask etherscan for the current
    ; block number using their API.
    etherscan_api_key = PUT_YOUR_API_KEY_HERE
    ; your infura api key, if you want to ask infura for the current block
    ; number using their API.
    infura_api_key = PUT_YOUR_API_KEY_HERE

    ; below this line can take comma-separated values.

    ; where to source the highest block from as a canonical source.
    ; if your geth nodes are unreliable, try 'etherscan' or 'etherchain'.
    ; otherwise, using 'geth' here will use your reference_node. you can
    ; chain multiple together, e.g.
    ; get_highest_from = etherchain,geth
    ; and quarian will use the highest returned value as where mainnet is.
    get_highest_from = etherscan
    ; The nodes you are monitoring with quarian.
    nodelist = http://localhost:8545/
    ; checks to run on each node
    checklist = timer

[quarian:restarter:http]
    ; what port the quarian restarter should be listening on for connections.
    listen_port = 8546
    ; authentication type for the HTTP restarter. 'noauth' assumes you don't
    ; care that others on the network can issue restarts to your geth node.
    ; 'psk' uses a pre-shared key. If you set 'psk' and not the key, you will
    ; have one autogenerated by the restarter service.
    auth_type = noauth
    ; preshared key. This should be something random.
    ; the HTTP restarter will not start with the default value in place
    ; if 'psk' is selected
    auth_psk = 'INSECURE_PRESHARED_KEY_IS_HERE'
    ; ignores requests if repeated within this window.
    ignore_restart_requests_for_sec = 30
    ; the shell command to execute on the server to restart geth
    restart_command = supervisorctl restart geth

[quarian:check:chaintip]
    ; how far to allow the geth node to trail if it is in a syncing state.
    ; nodes below this range will be restarted.
    allow_trailing_syncing = 50
    ; how far to allow the geth node to trail if it is not syncing.
    ; nodes below this range will be restarted.
    allow_trailing_stalled = 50
    ; grace period strategy. 'fixed' will wait a fixed amount of seconds to
    ; restart a chaintip geth node that is out of order, giving it a chance
    ; to catch up. 'adaptive' will multiply the delta by time in seconds in
    ; order to generate a better estimate of when we expect the chain to be
    ; synced.
    restart_grace_period_strategy = adaptive
    ; how long to wait in between triggers of restart_geth
    ; we don't want to kill a syncing process that's really lagging,
    ; and give it time to catch up.
    restart_grace_period_sec = 30
    ; multiplier on delta when using 'adaptive' strategy. set this to a
    ; reasonable average time for the geth node to download a block.
    restart_grace_period_adaptive_blocks_per_sec = 5


[quarian:check:timer]
    ; restart the geth node after this many seconds
    restart_every_sec=86400


[quarian:check:proxy]
    ; Delay for restarting due to proxy failure. This should give geth
    ; a sufficient amount of time to come back up/recover. This will change
    ; depending on your reverse proxy's settings.
    restart_delay_sec = 60
    ; Status codes that trigger a restart. These should likely be HTTP 5xx
    ; codes from the reverse proxy. Takes a comma delimited list.
    restart_codes = 502
    ; TLS Client Cert file in PEM format. Used to TLS authenticate with the
    ; reverse proxy in high-security environments.
    ; tls_client_cert_file = /path/to/client_cert.pem